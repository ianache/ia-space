services:
  # Traefik: Proxy inverso que enruta el tráfico HTTP a los servicios 
  # internos según reglas y dominios configurados.
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      traefik.enable: true
      traefik.http.routers.traefik.rule: Host(`traefik.lab.iap.com`)
      traefik.http.routers.traefik.entrypoints: web
      traefik.http.services.traefik.loadbalancer.server.port: 8080
    networks:
      - frontend
      - backend

  # Langflow: Plataforma para construir y ejecutar flujos de trabajo de IA 
  # mediante una interfaz visual.
  langflow:
    image: langflowai/langflow:${LANGFLOW_VER:-1.4.1} #latest
    pull_policy: always
    restart: always
    ports:
      - "7860:7860"
    volumes:
      - langflow-data:/app/langflow
    env_file:
    - .env-langflow
    networks:
      - frontend
      - backend
    labels:
      traefik.enable: true
      traefik.http.routers.langflow.rule: Host(`langflow.lab.iap.com`)"
      traefik.http.routers.langflow.entrypoints: web
      traefik.http.services.langflow.loadbalancer.server.port: 7860
  # Redis: Almacenamiento en memoria clave-valor, útil para caché y colas.
  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
    - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    env_file:
    - .env-redis
    volumes:
    - redis-data:/data
    networks:
      - backend

  pgvector:
    image: ankane/pgvector:${PGVECTOR_VER:-latest}
    restart: unless-stopped
    env_file:
    - .env-pgvector
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: welcome1
      POSTGRES_DB: pgvector
    #ports:
    #  - "5432:5432"
    # CREATE EXTENSION vector;
    volumes:
    - pgvector-data:/var/lib/postgresql/data
    networks:
      - backend

  # Neo4j: Base de datos de grafos, ideal para almacenar y consultar
  neo4j:
    image: neo4j:latest #5.21.0
    ports:
    - "7474:7474" # HTTP
    - "7687:7687" # Bolt
    volumes:
    - neo4j-data:/data
    env_file:
    - .env-neo4j
    environment:
    - NEO4J_PLUGINS=["apoc", "graph-data-science"]
    #healthcheck:
    #  test: ["CMD", "neo4j", "status"]
    #  interval: 10s
    #  timeout: 5s
    #  retries: 5
    networks:
      - backend
    labels:
      traefik.enable: true
      traefik.http.routers.neo4j.rule: Host(`neo4j.lab.iap.com`)
      traefik.http.routers.neo4j.entrypoints: web
      traefik.http.services.neo4j.loadbalancer.server.port: 7474
  
  qdrant:
    image: qdrant/qdrant:${QDRANT_VERSION:-v1.14.1}
    ports:
      - "6333:6333" # Qdrant HTTP API
      - "6334:6334" # Qdrant gRPC API
    volumes:
      - qdrant-data:/qdrant/storage # Persistent storage for Qdrant data
    networks:
      - backend
    labels:
      traefik.enable: true
      traefik.http.routers.qdrant.rule: Host(`qdrant.lab.iap.com`)
      traefik.http.routers.qdrant.entrypoints: web
      traefik.http.services.qdrant.loadbalancer.server.port: 6333

  # n8n: Plataforma de automatización y orquestación de tareas.
  n8n:
    image: docker.n8n.io/n8nio/n8n:${N8N_VERSION:-1.100.1} #1.91.3}
    ports:
      - 5678:5678
    environment:
      N8N_HOST: n8n.lab.iap.com # ${SUBDOMAIN}.${DOMAIN_NAME}
      ##N8N_PORT: 5678
      ##N8N_PROTOCOL: https
      ##NODE_ENV: production
      N8N_RUNNERS_ENABLED: true
      N8N_SECURE_COOKIE: false
      N8N_MFA_ENABLED: false
      N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE: true
      #N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: true
      DB_TYPE: postgresdb
      DB_POSTGRESDB_DATABASE: postgres
      DB_POSTGRESDB_HOST: pgvector
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_USER: postgres
      DB_POSTGRESDB_SCHEMA: public #n8ndb #public
      DB_POSTGRESDB_PASSWORD: welcome1
      N8N_ENCRYPTION_KEY: p0eqZitTTukzCs88Iu5PsyZ9cw2GDQsH
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      - frontend
      - backend
    healthcheck:
      test:
        - CMD-SHELL
        - 'wget -qO- http://127.0.0.1:5678/'
      interval: 5s
      timeout: 20s
      retries: 10
    labels:
      traefik.enable: true
      traefik.http.routers.n8n.rule: Host(`n8n.lab.iap.com`)
      traefik.http.routers.n8n.entrypoints: web
      traefik.http.services.n8n.loadbalancer.server.port: 5678
  #
  ## LiteLLM
  #
  litellm:
    image: ghcr.io/berriai/litellm-database:${LITELLM_VERSION:-main-latest}
    env_file:
      - .env-litellm
    ports:
      - "4000:4000"
    volumes:
      - ./litellm/config.yaml:/app/config.yaml
    command: --config /app/config.yaml --port 4000
    networks:
      - backend

  #
  ## OpenWeb UI
  #
  openwebui:
    image: ghcr.io/open-webui/open-webui:${OPENWEBUI_VERSION:-main}
    ports:
      - 8080:8080
    env_file:
      - .env-openwebui
    volumes:
      - openwebui-data:/app/backend/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    networks:
      - backend
      - frontend
    labels:
      traefik.enable: true
      traefik.http.routers.oi.rule: Host(`oi.lab.iap.com`)
      traefik.http.routers.oi.entrypoints: web
      traefik.http.services.oi.loadbalancer.server.port: 8080
  #
  ## Tailscale
  #
  tailscale:
    image: tailscale/tailscale:${TAILSCALE_VERSION:-latest}
    env_file:
      - .env-tailscale
    volumes:
      - tailscale-data:/var/lib/tailscale    
      - ./tailscale:/config
      - /dev/net/tub:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
  ##
  ### Hasura
  ##
  graphql-engine:
    image: hasura/graphql-engine:v2.46.0
    ports:
      - "8090:8080"
    #restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:welcome1@pgvector:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:welcome1@pgvector:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
    depends_on:
      data-connector-agent:
        condition: service_healthy
    networks:
      - backend
  ##
  ### Hasura Connectors
  ##
  data-connector-agent:
    image: hasura/graphql-data-connector:v2.46.0
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - backend
  ##
  ### MySQL
  ##
  data-mysql:
    image: hasura/mysql:0.1
    environment:
      JDBC_URL: jdbc:mysql://mysql:3306/demo
    networks:
      - backend

  ##
  ### MySQL
  ##
  mysql-db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: welcome1
      MYSQL_DATABASE: demo
      MYSQL_USER: demo
      MYSQL_PASSWORD: welcome1
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - backend
        
networks:
  frontend:
  backend:

volumes:
  mysql_data:
  neo4j-data:
  langflow-data:
  pgvector-data:
  redis-data:
  n8n-data:
  openwebui-data:
  tailscale-data:
  qdrant-data:
